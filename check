#! /usr/bin/env sh

# Script File to test
PY_SCRIPT="scrabble_python"
JL_SCRIPT="scrabble_julia"

# Text colors
COLOR_REST="$(tput sgr0)"
COLOR_RED="$(tput setaf 1)"
COLOR_GREEN="$(tput setaf 2)"

################################################################################
# Check command line arguments
# Usage: ./check [-p, -j] script_filename
#   -p = python
#   -j = julia
#   script_filename = file to test
################################################################################
GIVEN_SCRIPT=""
LANG=""
if [ $# -eq 2 ]
then
    if [ "${1}" = "-p" ]
    then
        LANG="python"
        EXP_SCRIPT=${PY_SCRIPT}
    else
        if [ "${1}" = "-j" ]
        then
            LANG="julia"
            EXP_SCRIPT=${JL_SCRIPT}
        else
            printf "Usage: ./check [-p, -j] script_filename\n"
            exit
        fi
    fi
    GIVEN_SCRIPT="${2}"
else
    printf "Usage: ./check [-p, -j] script_filename\n"
    exit
fi

################################################################################
# Check if the script filename is the expected filename
################################################################################
if [ "${GIVEN_SCRIPT}" != "${EXP_SCRIPT}" ]
then
    printf "Script name should be: ${EXP_SCRIPT}\n"
    exit
fi

################################################################################
# Check if the given script exists
################################################################################
if [ ! -f "${EXP_SCRIPT}" ]
then
    printf "File not found: ${EXP_SCRIPT}\n"
    exit
fi

################################################################################
# Check if python or julia executable is available
################################################################################
pyapp=`which ${LANG}`
if [ "${pyapp:0:1}" == "/" ]
then
    ${LANG} --version
else
    printf "${LANG} not found\n"
    exit
fi

################################################################################
# Test function
################################################################################
run_test () {
    # Get Parameters
    TEST_LABEL=$1
    TEST_NUMBER=$2
    TEST_PARAMS=$3
    TEST_STDIN=$4
    # Set files for testing
    TEST_IN=.test/${TEST_NUMBER}.in
    TEST_EXP=.test/${TEST_NUMBER}.exp
    TEST_OUT=".test/${TEST_NUMBER}_test.out"
    TEST_DIFF=".test/${TEST_NUMBER}_test.diff"
    # Run the script
    if [ "${TEST_STDIN}" = "" ]
    then
        # ${LANG} ${EXP_SCRIPT} ${TEST_PARAMS} > ${TEST_OUT}
        ./${EXP_SCRIPT} ${TEST_PARAMS} > ${TEST_OUT}
    else
        # ${LANG} ${EXP_SCRIPT} ${TEST_PARAMS} < ${TEST_IN} > ${TEST_OUT}
        ./${EXP_SCRIPT} ${TEST_PARAMS} < ${TEST_IN} > ${TEST_OUT}
    fi
    
    NB_LINES=`cat ${TEST_OUT} | wc -c`
    if [ ${NB_LINES} -eq 0 ]
    then
        printf "\n"
        printf "${TEST_NUMBER} ${COLOR_RED}\xE2\x9C\x97${COLOR_REST} ${TEST_LABEL}\n"
        printf "Your script prints nothing\n"
    fi
    diff ${TEST_EXP} ${TEST_OUT} > ${TEST_DIFF}
    NB_DIFF=`cat ${TEST_DIFF} | wc -l`
    NB_TEST_TOTAL=$((NB_TEST_TOTAL+1))
    if [ ${NB_DIFF} -eq 0 ]
    then
        printf "${TEST_NUMBER} ${COLOR_GREEN}\xE2\x9C\x94${COLOR_REST} ${TEST_LABEL}\n"
        rm ${TEST_OUT}
        rm ${TEST_DIFF}
        NB_TEST_OK=$((NB_TEST_OK+1))
    else
        printf "\n"
        printf "${TEST_NUMBER} ${COLOR_RED}\xE2\x9C\x97${COLOR_REST} ${TEST_LABEL}\n"
        printf "${COLOR_GREEN}Expected${COLOR_REST}\n"
        grep "<" ${TEST_DIFF}
        printf "${COLOR_RED}Given${COLOR_REST}\n"
        grep ">" ${TEST_DIFF}
        printf "\n"
    fi
}

################################################################################
# Run tests
################################################################################

# Test counters
NB_TEST_OK=0
NB_TEST_TOTAL=0

run_test "Scrabble Question? Question!" "01" "" "in"
run_test "Scrabble red wheelbarrow" "02" "" "in"
run_test "Scrabble COMPUTER science" "03" "" "in"
run_test "Scrabble Scrabble wiNNeR" "04" "" "in"
run_test "Scrabble   " "05" "" "in"

##################################################
# Print Summary
##################################################
if [ ${NB_TEST_OK} -eq ${NB_TEST_TOTAL} ]
then
    printf "Validated: ${COLOR_GREEN}${NB_TEST_OK}/${NB_TEST_TOTAL}${COLOR_REST}\n"
else
    printf "Validated: ${COLOR_RED}${NB_TEST_OK}/${NB_TEST_TOTAL}${COLOR_REST}\n"
fi
